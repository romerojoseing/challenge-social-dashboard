{"version":3,"sources":["switch.js","header.js","card.js","top-card-list.js","card-small.js","overview.js","App.js","serviceWorker.js","index.js"],"names":["theme","body","document","localStorage","getItem","classList","add","Switch","className","onClick","e","replace","target","remove","setItem","switchTheme","type","name","id","htmlFor","Header","Card","username","followers","todayFollowers","icon","cardClass","src","alt","cardListData","TopCardList","map","cardData","key","CardSmall","text","view","percentage","Overview","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5271c177.chunk.js","sourcesContent":["import React from 'react';\r\nimport './switch.css';\r\n\r\nlet clickedClass = \"clicked\";\r\nconst body = document.body;\r\nconst lightTheme = \"light\";\r\nconst darkTheme = \"dark\";\r\nlet theme;\r\n\r\nif (localStorage) {\r\n  theme = localStorage.getItem(\"theme\");\r\n}\r\n\r\nif (theme === lightTheme || theme === darkTheme) {\r\n  body.classList.add(theme);\r\n} else {\r\n  body.classList.add(lightTheme);\r\n}\r\n\r\nconst switchTheme = (e) => {\r\n  if (theme === darkTheme) {\r\n    body.classList.replace(darkTheme, lightTheme);\r\n    e.target.classList.remove(clickedClass);\r\n    localStorage.setItem(\"theme\", \"light\");\r\n    theme = lightTheme;\r\n  } else {\r\n    body.classList.replace(lightTheme, darkTheme);\r\n    e.target.classList.add(clickedClass);\r\n    localStorage.setItem(\"theme\", \"dark\");\r\n    theme = darkTheme;\r\n  }\r\n};\r\n\r\nfunction Switch() {\r\n  return (\r\n    <div className=\"dark-mode\">\r\n      <p className=\"dark-mode-title\">Dark Mode</p>\r\n      <input\r\n        onClick={(e) => switchTheme(e)}\r\n        className=\"checkbox\"\r\n        type=\"checkbox\"\r\n        name=\"checkbox\"\r\n        id=\"checkbox\"\r\n      />\r\n      <label className=\"switch\" htmlFor=\"checkbox\"></label>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Switch","import React from 'react';\r\nimport './header.css';\r\nimport Switch from './switch'\r\n\r\nfunction Header(){\r\n  return(\r\n    <header className=\"header\">\r\n      <div className=\"wrapper\">\r\n        <div className=\"header-grid\">\r\n          <div>\r\n            <h1>Social Media Dashboard</h1>\r\n            <p className=\"header-followers\">Total followers: 23,004</p>\r\n          </div>\r\n          <Switch/>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header","import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nfunction Card({username, followers, todayFollowers, icon, name}) {\r\n  const cardClass = `card ${name}`\r\n  return (\r\n    <article className={cardClass}>\r\n      <p className=\"card-title\">\r\n        <img src={icon} alt=\"\" />\r\n        {username}\r\n      </p>\r\n      <p className=\"card-followers\">\r\n        <span className=\"card-followers-number\">{followers}</span>\r\n        <span className=\"card-followers-text\">Followers</span>\r\n      </p>\r\n      <p className=\"card-today\">\r\n        <img src=\"img/icon-up.svg\" alt=\"\" />\r\n        {todayFollowers} today\r\n      </p>\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport './top-card-list.css';\r\nimport Card from './card';\r\n\r\nconst cardListData = [\r\n  {\r\n    id: 1,\r\n    username: '@romerojoseing',\r\n    followers: '1987',\r\n    todayFollowers: 12,\r\n    icon: 'img/icon-facebook.svg',\r\n    name: 'facebook',\r\n  },\r\n  {\r\n    id: 2,\r\n    username: '@romerojoseing',\r\n    followers: '1044',\r\n    todayFollowers: 99,\r\n    icon: 'img/icon-twitter.svg',\r\n    name: 'twitter',\r\n  },\r\n  {\r\n    id: 3,\r\n    username: '@romerojoseing',\r\n    followers: '11k',\r\n    todayFollowers: 1099,\r\n    icon: 'img/icon-instagram.svg',\r\n    name: 'instagram',\r\n  },\r\n  {\r\n    id: 4,\r\n    username: '@romerojoseing',\r\n    followers: '8239',\r\n    todayFollowers: -144,\r\n    icon: 'img/icon-youtube.svg',\r\n    name: 'youtube',\r\n  },\r\n];\r\n\r\nfunction TopCardList(){\r\n  return (\r\n    <section className=\"top-cards\">\r\n      <div className=\"wrapper\">\r\n        <div className=\"grid\">\r\n          \r\n          {\r\n            cardListData.map((cardData) => (\r\n            <Card key={cardData.id} {...cardData} />\r\n            ))\r\n          }\r\n\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );  \r\n}\r\n\r\nexport default TopCardList","import React from \"react\";\r\nimport \"./card-small.css\";\r\n\r\n\r\nfunction CardSmall({text, icon, view, percentage}) {\r\n  return (\r\n    <article className=\"card-small\">\r\n      <p className=\"card-small-views\">{text}</p>\r\n      <p className=\"card-small-icon\">\r\n        <img src={icon} alt=\"\" />\r\n      </p>\r\n      <p className=\"card-small-number\">{view}</p>\r\n      <p className=\"card-small-percentage\">\r\n        <span>\r\n  <img src=\"img/icon-up.svg\" alt=\"\" /> {percentage}%\r\n              </span>\r\n      </p>\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default CardSmall","import React from 'react';\r\nimport './overview.css'\r\nimport CardSmall from './card-small'\r\n\r\nconst cardListData = [\r\n  {\r\n    id: 1,\r\n    text: 'Page Views',\r\n    icon: 'img/icon-facebook.svg',\r\n    view: 87,\r\n    percentage: 3, \r\n  },\r\n  {\r\n    id: 2,\r\n    text: 'Likes',\r\n    icon: 'img/icon-facebook.svg',\r\n    view: 52,\r\n    percentage: -2, \r\n  },\r\n  {\r\n    id: 3,\r\n    text: 'Likes',\r\n    icon: 'img/icon-twitter.svg',\r\n    view: 5462,\r\n    percentage: 2257, \r\n  },\r\n  {\r\n    id: 4,\r\n    text: 'Page Views',\r\n    icon: 'img/icon-twitter.svg',\r\n    view: 52,\r\n    percentage: 1375, \r\n  },\r\n  {\r\n    id: 5,\r\n    text: 'Retweets',\r\n    icon: 'img/icon-instagram.svg',\r\n    view: 111,\r\n    percentage: 303, \r\n  },\r\n  {\r\n    id: 6,\r\n    text: 'Likes',\r\n    icon: 'img/icon-instagram.svg',\r\n    view: 507,\r\n    percentage: 553, \r\n  },\r\n  {\r\n    id: 7,\r\n    text: 'Likes',\r\n    icon: 'img/icon-youtube.svg',\r\n    view: 107,\r\n    percentage: -19, \r\n  },\r\n  {\r\n    id: 8,\r\n    text: 'Total Views',\r\n    icon: 'img/icon-youtube.svg',\r\n    view: 1407,\r\n    percentage: -12, \r\n  },\r\n    \r\n];\r\n\r\nfunction Overview() {\r\n  return (\r\n    <section className=\"overview\">\r\n      <div className=\"wrapper\">\r\n        <h2>Overview - Today</h2>\r\n        <div className=\"grid\">\r\n          {\r\n            cardListData.map((cardData) => (\r\n              <CardSmall key={cardData.id} {...cardData} />\r\n            ))\r\n          }\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Overview","import React from 'react';\nimport './global.css';\nimport Header from './header';\nimport TopCardList from './top-card-list';\nimport Overview from './overview';\n\nfunction App() {\n\n  return (\n    <>\n      <Header/> \n      <TopCardList/>\n      <Overview/>\n    </>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}